return(as.formula(paste(target, " ~ ", predictors, sep = "")))  # Return formula for lm()
}
df <- read_excel("PLEFinalProjectData.xlsx", "Purchasing Survey Data")
names(df) <- gsub(" ", ".", names(df))  # Replace spaces with '.' in column names
form.satis <- createFormula(df, "Satisfaction.Level")
fit.satis <- lm(form.satis, data = df)
summary(fit.satis)
fit.usage <- lm(form.usage, data = df)
form.usage <- craeteFormila(df, "Usage.Level")  # Create formula 2
form.usage <- createFormula(df, "Usage.Level")  # Create formula 2
summary(fit.usage)
fit.usage <- lm(form.usage, data = df)
summary(fit.usage)
getwd9
getwd()
rm(list = ls())
library(forecast)
df <- read_excel("PLEFinalProjectData.xlsx", "Tractor Sales")
minDate <- as.numeric(c(min(substr(df$Month, 1, 4)), 1))   # (2010, 1)
maxDate <- as.numeric(c(max(substr(df$Month, 1, 4)), 12))  # (2014, 12)
data.ts <- ts(data = df[ ,2:7]
, start = minDate
, end = maxDate
, frequency = 12)
plot(data.ts)  # Plot time series sequences
plot(stl(data.ts, s.window = "period"))
data.ts
data.ts[1]
data.ts[ ,1]
data.ts["NA"]
str(data.ts)
data.ts$NA
?window
window(data.ts, 2010)
window(data.ts, NA)
window(data.ts, "NA")
data.ts[, "NA"]
stl(data.ts[, "NA"], s.window = "period")
plot(stl(data.ts[ ,"NA"], s.window = "period"))
plot(stl(log(data.ts[ ,"NA"]), s.window = "period"))
rm(minDate, maxDate)
plot(data.ts)  # Plot time series sequences
png("seriesPlots.png")
plot(data.ts)  # Plot time series sequences
dev.off()
?plot
png("output/seriesPlots.png")
png("output/seriesPlots.png")
plot(data.ts, main = "Time Series By Region")  # Plot time series sequences
dev.off()
plot(stl(data.ts[ ,1], s.window = "period"))
length(data.ts)
ncol(data.ts)
data.ts
?png
names(data.ts)
data.ts$
colnames(data.ts)
colnames(data.ts)[1]
for (i in 1:ncol(data.ts)) {
decomps <- stl(data.ts[ ,i], s.window = "period")
png(filename = paste("decompCharts", colnames(data.ts)[i], sep = ""))
plot(decomps)
dev.off()
}
paste("decompCharts", colnames(data.ts)[1], sep = "")
for (i in 1:ncol(data.ts)) {
decomps <- stl(data.ts[ ,i], s.window = "period")
png(filename = paste("decompCharts", colnames(data.ts)[i], ".png", sep = ""))
plot(decomps)
dev.off()
}
rm(i, decomps)
i = 1
png(filename = paste("decompCharts", colnames(data.ts)[i], ".png", sep = ""))
plot(decomps)
decomps <- stl(data.ts[ ,i], s.window = "period")
plot(decomps)
dev.off()
for (i in 1:ncol(data.ts)) {
png(filename = paste("output/decompCharts"
, colnames(data.ts)[i]
, ".png"
, sep = ""))
decomps <- stl(data.ts[ ,i], s.window = "period")
plot(decomps)
dev.off()
}
rm(i, decomps)
png("decompChartsAll.png")
layout(matrix(c(1,2,3,4,5,6),3,2)) # optional 4 graphs/page
for (i in 1:ncol(data.ts)) {plot(stl(data.ts[ ,i], s.window = "period"))}
layout(matrix(c(1,1)))
dev.off()
rm(i, decomps)
stl
?stl
for (i in 1:ncol(data.ts)) {
png(filename = paste("output/decompCharts"
, colnames(data.ts)[i]
, ".png"
, sep = ""))
decomps <- stl(data.ts[ ,i], s.window = "period")
chartTitle <- paste("Region: ", colnames(data.ts)[i], sep = "")
plot(decomps, main = chartTitle)
dev.off()
}
rm(i, decomps, chartTitle)
winters <- function(ts, freq) {
fit <- HoltWinters(ts)
forecast <- forecast.HoltWinters(fit, h = freq)
}
f.NA <- winters(data.ts[, "NA"], 60)
accuracy(f.NA)
plot(f.NA)
class(accuracy(f.NA))
length(accuracy(f.NA))
f.Pac <- winters(data.ts[, "Pac"], 60)  # Pacific
f.World <- winters(data.ts[, "World"], 60)  # World
dim(accuracy(f.NA))
dim(accuracy(f.NA), accuracy(f.Pac))
dim(cbind(accuracy(f.NA), accuracy(f.Pac)))
dim(rbind(accuracy(f.NA), accuracy(f.Pac)))
accuracy.matrix <- rbind(accuracy(f.NA),
accuracy(f.Pac),
accuracy(f.World))
accuracy.matrix
rownames(accuracy.matrix)
rownames(accuracy.matrix) <- c("NA", "Pac", "World")
rownames(accuracy.matrix)
plot(accuracy.matrix)
accuracy.matrix <- t(rbind(accuracy(f.NA),
accuracy(f.Pac),
accuracy(f.World)))
dim(accuracy.matrix)
colnames(accuracy.matrix) <- c("NA", "Pac", "World")
accuracy.matrix
model.NA <- hw(data.ts[, "NA"], initial = "optimal", h = 60, beta = NULL)
accuracy(model.NA)
plot(model.NA)
plot(data[, "NA"])
plot(data.ts[, "NA"])
plot(log(data.ts[, "NA"]))
accuracy.matrix <- t(rbind(accuracy(model.NA),
accuracy(model.Pac),
accuracy(model.World)))
colnames(accuracy.matrix) <- c("NA", "Pac", "World")
model.NA <- hw(data.ts[, "NA"], initial = "optimal", h = 60, beta = NULL)
model.Pac <- hw(data.ts[, "Pac"], initial = "optimal", h = 60, beta = NULL)
model.World <- hw(data.ts[, "World"], initial = "optimal", h = 60, beta = NULL)
accuracy.matrix <- t(rbind(accuracy(model.NA),
accuracy(model.Pac),
accuracy(model.World)))
rm(list = ls())
df <- read_excel("PLEFinalProjectData.xlsx", "Tractor Sales")
minDate <- as.numeric(c(min(substr(df$Month, 1, 4)), 1))   # (2010, 1)
maxDate <- as.numeric(c(max(substr(df$Month, 1, 4)), 12))  # (2014, 12)
## Create Time-Series Object Matrix: (60, 6)
data.ts <- ts(data = df[ ,2:7]
, start = minDate
, end = maxDate
, frequency = 12)
rm(minDate, maxDate)
## Visualize Time-Series
png("output/seriesPlots.png")
plot(data.ts, main = "Time Series By Region")  # Plot time series sequences
dev.off()
## Seasonal Decomposition Charts
for (i in 1:ncol(data.ts)) {
png(filename = paste("output/decompCharts"
, colnames(data.ts)[i]
, ".png"
, sep = ""))
decomps <- stl(data.ts[ ,i], s.window = "period")
chartTitle <- paste("Region: ", colnames(data.ts)[i], sep = "")
plot(decomps, main = chartTitle)
dev.off()
}
rm(i, decomps, chartTitle)
## Use Winters for Forecasts with Seasonality
model.NA <- hw(data.ts[, "NA"], initial = "optimal", h = 60, beta = NULL)
model.Pac <- hw(data.ts[, "Pac"], initial = "optimal", h = 60, beta = NULL)
model.World <- hw(data.ts[, "World"], initial = "optimal", h = 60, beta = NULL)
# Assess the models
accuracy.matrix <- t(rbind(accuracy(model.NA),
accuracy(model.Pac),
accuracy(model.World)))
colnames(accuracy.matrix) <- c("NA", "Pac", "World")
accuracy.matrix <- t(rbind(accuracy(model.NA),
accuracy(model.Pac),
accuracy(model.World)))
colnames(accuracy.matrix) <- c("NA", "Pac", "World")
accuracy.matrix
model.NA <- hw(data.ts[, "NA"], initial = "optimal", h = 60)
model.Pac <- hw(data.ts[, "Pac"], initial = "optimal", h = 60)
model.World <- hw(data.ts[, "World"], initial = "optimal", h = 60)
accuracy.matrix <- t(rbind(accuracy(model.NA),
accuracy(model.Pac),
accuracy(model.World)))
colnames(accuracy.matrix) <- c("NA", "Pac", "World")
accuracy.matrix
model.Eur <- hw(data.ts[, "Eur"], initial = "optimal", h = 60, gamma = NULL)
model.SA <- hw(data.ts[, "SA"], initial = "optimal", h = 60, gamma = NULL)
model.China <- hw(data.ts[, "China"], initial = "optimal", h = 60, gamma = NULL)
accuracy.matrix <- t(rbind(accuracy(model.NA),
accuracy(model.Pac),
accuracy(model.World),
accuracy(model.Eur),
accuracy(model.SA),
accuracy(model.China)))
colnames(accuracy.matrix) <- c("NA", "Pac", "World", "Eur", "SA", "China")
accuracy.matrix
plot(model.NA)
plot(model.China)
plot(model.World)
arima.fit <- auto.arima(data.ts[ ,"NA"])
accuracy(auto.fit)
accuracy(arima.fit)
arima.fit <- auto.arima(data.ts[ ,"China"])
accuracy(arima.fit)
model.NA <- hw(log(data.ts[, "NA"]), initial = "optimal", h = 60)
model.Pac <- hw(data.ts[, "Pac"], initial = "optimal", h = 60)
model.World <- hw(log(data.ts[, "World"]), initial = "optimal", h = 60)
## Use Double-Exponential Smoothing fore Forecasts on Level and Seasonality
model.Eur <- hw(data.ts[, "Eur"], initial = "optimal", h = 60, gamma = NULL)
model.SA <- hw(data.ts[, "SA"], initial = "optimal", h = 60, gamma = NULL)
model.China <- hw(data.ts[, "China"], initial = "optimal", h = 60, gamma = NULL)
# Store accuracy metrics for each model
accuracy.matrix <- t(rbind(accuracy(model.NA),
accuracy(model.Pac),
accuracy(model.World),
accuracy(model.Eur),
accuracy(model.SA),
accuracy(model.China)))
colnames(accuracy.matrix) <- c("NA", "Pac", "World", "Eur", "SA", "China")
plot(model.NA)
plot(model.World)
plot(model.SA)
plt(arima.fit)
plot(arima.fit)
layout(matrix(c(1,2,3,4,5,6),2,3))
plot(model.NA)
plot(model.Pac)
plot(model.SA)
plot(model.Eur)
plot(model.World)
layout(matrix(c(1,1)))
layout(matrix(c(1,2,3,4,5,6),2,3))
plot(model.NA)
plot(model.Pac)
plot(model.SA)
plot(model.China)
plot(model.Eur)
plot(model.World)
layout(matrix(c(1,1)))
layout(matrix(c(1,2,3,4,5,6),2,3))
plot(model.NA, main = "NA: Holt-Winters'")
plot(model.Pac, main = "Pac: Holt-Winters'")
plot(model.SA, main = "SA: Double-Smoothing")
plot(model.China, main = "China: Double-Smoothing")
plot(model.Eur, main = "Eur: Double-Smoothing")
plot(model.World, main = "World: Holt-Winters'")
layout(matrix(c(1,1)))
png("FinalForecasts.png")
layout(matrix(c(1,2,3,4,5,6),2,3))
plot(model.NA, main = "NA: Holt-Winters'")
plot(model.Pac, main = "Pac: Holt-Winters'")
plot(model.SA, main = "SA: Double-Smoothing")
plot(model.China, main = "China: Double-Smoothing")
plot(model.Eur, main = "Eur: Double-Smoothing")
plot(model.World, main = "World: Holt-Winters'")
layout(matrix(c(1,1)))
dev.off()
png("output/FinalForecasts.png")
layout(matrix(c(1,2,3,4,5,6),2,3))
plot(model.NA, main = "NA: Holt-Winters'")
plot(model.Pac, main = "Pac: Holt-Winters'")
plot(model.SA, main = "SA: Double-Smoothing")
plot(model.China, main = "China: Double-Smoothing")
plot(model.Eur, main = "Eur: Double-Smoothing")
plot(model.World, main = "World: Holt-Winters'")
layout(matrix(c(1,1)))
dev.off()
?png
png("output/FinalForecasts.png", width = 600, height = 400)
layout(matrix(c(1,2,3,4,5,6),2,3))
plot(model.NA, main = "NA: Holt-Winters'")
plot(model.Pac, main = "Pac: Holt-Winters'")
plot(model.SA, main = "SA: Double-Smoothing")
plot(model.China, main = "China: Double-Smoothing")
plot(model.Eur, main = "Eur: Double-Smoothing")
plot(model.World, main = "World: Holt-Winters'")
layout(matrix(c(1,1)))
dev.off()
png("output/FinalForecasts.png", width = 1200, height = 800)
layout(matrix(c(1,2,3,4,5,6),2,3))
plot(model.NA, main = "NA: Holt-Winters'")
plot(model.Pac, main = "Pac: Holt-Winters'")
plot(model.SA, main = "SA: Double-Smoothing")
plot(model.China, main = "China: Double-Smoothing")
plot(model.Eur, main = "Eur: Double-Smoothing")
plot(model.World, main = "World: Holt-Winters'")
layout(matrix(c(1,1)))
dev.off()
png("output/FinalForecasts.png", width = 900, height = 600)
layout(matrix(c(1,2,3,4,5,6),2,3))
plot(model.NA, main = "NA: Holt-Winters'")
plot(model.Pac, main = "Pac: Holt-Winters'")
plot(model.SA, main = "SA: Double-Smoothing")
plot(model.China, main = "China: Double-Smoothing")
plot(model.Eur, main = "Eur: Double-Smoothing")
plot(model.World, main = "World: Holt-Winters'")
layout(matrix(c(1,1)))
dev.off()
accuracy.matrix
arima.fit <- auto.arima(data.ts[ ,"China"])
accuracy(arima.fit)
plot(arima.fit)
accuracy.matrix
accuracy.matrix["MAE", ]
plot(accuracy.matrix["MAE", ])
bar(accuracy.matrix["MAE", ])
barplot(accuracy.matrix["MAE", ])
layout(matrix(c(1,1)))
barplot(accuracy.matrix["MAE", ])
?barplot
barplot(accuracy.matrix["MAE", ], main = "MAE Errors by Region")
barplot(accuracy.matrix["MAE", ]
, main = "MAE Errors by Region"
, xlab = "Region", ylab = "MAE"
, col = "blue")
barplot(accuracy.matrix["MAE", ]
, main = "MAE Errors by Region"
, xlab = "Region", ylab = "MAE")
png("output/MAE.png")
barplot(accuracy.matrix["MAE", ]
, main = "MAE Errors by Region"
, xlab = "Region", ylab = "MAE")
dev.off()
layout(matrix(c(1,2,3,4,5,6),2,3))
png("output/FinalForecasts.png", width = 900, height = 600)
plot(model.NA, main = "NA: Holt-Winters'")
plot(model.Pac, main = "Pac: Holt-Winters'")
plot(model.SA, main = "SA: Double-Smoothing")
plot(model.China, main = "China: Double-Smoothing")
plot(model.Eur, main = "Eur: Double-Smoothing")
plot(model.World, main = "World: Holt-Winters'")
dev.off()
layout(matrix(c(1,1)))
png("output/MAE.png")
barplot(accuracy.matrix["MAE", ]
, main = "MAE Errors by Region"
, xlab = "Region", ylab = "MAE")
dev.off()
layout(matrix(c(1,2,3,4,5,6),2,3))
for (i in 1:ncol(data.ts)) {
png(filename = paste("output/decompCharts"
, colnames(data.ts)[i]
, ".png"
, sep = ""))
decomps <- stl(data.ts[ ,i], s.window = "period")
chartTitle <- paste("Region: ", colnames(data.ts)[i], sep = "")
plot(decomps, main = chartTitle)
dev.off()
}
layout(matrix(c(1,1)))
rm(list = ls())
library(readxl)
library(car)
df <- read_excel("PLEFinalProjectData.xlsx", "Purchasing Survey Data")
names(df) <- gsub(" ", ".", names(df))  # Replace spaces with '.' in column names
## Create formulas for linear model
createFormula <- function(df, target) {
exclude <- names(df) %in% target  # logical vector for excluding target var from data.frame
predictors <- paste(names(df)[!exclude], collapse = "+")  # Predictors of target
return(as.formula(paste(target, " ~ ", predictors, sep = "")))  # Return formula for lm()
}
form.satis <- createFormula(df, "Satisfaction.Level")  # Create formula 1
form.usage <- createFormula(df, "Usage.Level")  # Create formula 2
## Build Regression Models
fit.satis <- lm(form.satis, data = df)
fit.usage <- lm(form.usage, data = df)
plot(fit.satis)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit.satis)
layout(matrix(c(1,1)))
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit.satis)
plot(fit.usage)
layout(matrix(c(1,1)))
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
png("output/satisPlotsOLS.png")
plot(fit.satis)
dev.off()
png("data/usagePlotsOLS.png")
plot(fit.usage)
dev.off()
layout(matrix(c(1,1)))
dev.off()
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
png("output/satisPlotsOLS.png")
plot(fit.satis)
dev.off()
layout(matrix(c(1,1)))
plot(fit.satis)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit.satis)
layout(matrix(c(1,1)))
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
png("output/satisPlotsOLS.png")
plot(fit.satis)
dev.off()
png("output/satisPlotsOLS.png")
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit.satis)
layout(matrix(c(1,1)))
dev.off()
png("outpupt/usagePlotsOLS.png")
layout(matrix(c(1,2,3,4),2,2))
plot(fit.usage)
layout(matrix(c(1,1)))
dev.off()
dev.off()
png("output/usagePlotsOLS.png")
layout(matrix(c(1,2,3,4),2,2))
plot(fit.usage)
layout(matrix(c(1,1)))
dev.off()
png("output/OLSPlotsSatis.png")
layout(matrix(c(1,2,3,4),2,2))
plot(fit.satis, main = "Regression on Satisfaction")
layout(matrix(c(1,1)))
dev.off()
png("output/OLSPlotsUsage.png")
layout(matrix(c(1,2,3,4),2,2))
plot(fit.usage, main = "Regression on Usage Level")
layout(matrix(c(1,1)))
dev.off()
png("output/OLSPlotsSatis.png")
layout(matrix(c(1,2,3,4),2,2))
plot(fit.satis)
layout(matrix(c(1,1)))
dev.off()
png("output/OLSPlotsUsage.png")
layout(matrix(c(1,2,3,4),2,2))
plot(fit.usage)
layout(matrix(c(1,1)))
dev.off()
rm(list = ls())
df <- read_excel("PLEFinalProjectData.xlsx", "Tractor Sales")
minDate <- as.numeric(c(min(substr(df$Month, 1, 4)), 1))   # (2010, 1)
maxDate <- as.numeric(c(max(substr(df$Month, 1, 4)), 12))  # (2014, 12)
## Create Time-Series Object Matrix: (60, 6)
data.ts <- ts(data = df[ ,2:7]
, start = minDate
, end = maxDate
, frequency = 12)
rm(minDate, maxDate)
## Visualize Time-Series
png("output/seriesPlots.png")
plot(data.ts, main = "Time Series By Region")  # Plot time series sequences
dev.off()
## Seasonal Decomposition Charts
for (i in 1:ncol(data.ts)) {
png(filename = paste("output/decompCharts"
, colnames(data.ts)[i]
, ".png"
, sep = ""))
decomps <- stl(data.ts[ ,i], s.window = "period")
chartTitle <- paste("Region: ", colnames(data.ts)[i], sep = "")
plot(decomps, main = chartTitle)
dev.off()
}
rm(i, decomps, chartTitle)
## Use Holt-Winters for Forecasts on Level, Trend, and Seasonality
model.NA <- hw(log(data.ts[, "NA"]), initial = "optimal", h = 60)
model.Pac <- hw(data.ts[, "Pac"], initial = "optimal", h = 60)
model.World <- hw(log(data.ts[, "World"]), initial = "optimal", h = 60)
## Use Double-Exponential Smoothing fore Forecasts on Level and Seasonality
model.Eur <- hw(data.ts[, "Eur"], initial = "optimal", h = 60, gamma = NULL)
model.SA <- hw(data.ts[, "SA"], initial = "optimal", h = 60, gamma = NULL)
model.China <- hw(data.ts[, "China"], initial = "optimal", h = 60, gamma = NULL)
# Store accuracy metrics for each model
accuracy.matrix <- t(rbind(accuracy(model.NA),
accuracy(model.Pac),
accuracy(model.World),
accuracy(model.Eur),
accuracy(model.SA),
accuracy(model.China)))
colnames(accuracy.matrix) <- c("NA", "Pac", "World", "Eur", "SA", "China")
# Plot Forecasts
layout(matrix(c(1,2,3,4,5,6),2,3))
png("output/FinalForecasts.png", width = 900, height = 600)
plot(model.NA, main = "NA: Holt-Winters'")
plot(model.Pac, main = "Pac: Holt-Winters'")
plot(model.SA, main = "SA: Double-Smoothing")
plot(model.China, main = "China: Double-Smoothing")
plot(model.Eur, main = "Eur: Double-Smoothing")
plot(model.World, main = "World: Holt-Winters'")
dev.off()
layout(matrix(c(1,1)))
png("output/FinalForecasts.png", width = 900, height = 600)
layout(matrix(c(1,2,3,4,5,6),2,3))
plot(model.NA, main = "NA: Holt-Winters'")
plot(model.Pac, main = "Pac: Holt-Winters'")
plot(model.SA, main = "SA: Double-Smoothing")
plot(model.China, main = "China: Double-Smoothing")
plot(model.Eur, main = "Eur: Double-Smoothing")
plot(model.World, main = "World: Holt-Winters'")
layout(matrix(c(1,1)))
dev.off()
getwd()
